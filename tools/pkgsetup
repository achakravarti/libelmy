#!/bin/sh

. "$(dirname "0")/../external/shflags/shflags"
. "$(dirname "0")/../tools/msg.sh"

# -t,--target (default arch)
# -p,--pandoc (default true)
# -u,--update (default true)
# -c,--check (default true)
#
# ./pkgsetup --target arch --pandoc --update --check


export SUDO


# MAIN FUNCTIONS


main_flags()
{
        DEFINE_string 'os' 'arch' 'OS distribution' 1001
        DEFINE_boolean 'upgrade' true 'upgrade package manager' 1002
        DEFINE_boolean 'check' true 'support check tools' 1003
        DEFINE_boolean 'man' true 'support manpage tools' 1003

        FLAGS "$@" || exit $?
        eval set -- "$FLAGS_ARGV"
}


main_exec()
{
        id --version >/dev/null 2>&1 || msg_fail 'id not found'
        [ "$(id -u)" -eq 0 ] || msg_fail 'running as root is dangerous'


        if sudo -V >/dev/null 2>&1; then
                SUDO=sudo

        elif doas -L >/dev/null 2>&1; then
                SUDO=doas

        else
                msg_fail 'sudo/doas not found'
        fi

        if [ "$FLAGS_upgrade" -eq "$FLAGS_FALSE" ]; then
                mgs_warn '--noupdgrade set, skipping upgrade'
        else
                pkg_upgrade
        fi

        case "$FLAGS_os" in
        arch)
                setup_arch;;

        *)
                msg_fail 'unsupported OS distribution';;
        esac

}


# ARCH LINUX FUNCTIONS


arch_install()
{
        msg_info "checking package $1"

        if pacman -Qi | grep "$1" >/dev/null 2>&1; then
                msg_ok "package $1 found, skipping"
                return
        fi

        msg_info "package $1 not found, installing"

        arch_update

        if [ "$2" -eq 0 ]; then
                if ! sudo pacman -S --noconfirm "$1"; then
                        mgs_fail "failed to install package $1"
                fi
        else
                if ! yay -S --noconfirm "$1"; then
                        msg_fail "failed to install package $1"
                fi
        fi

        msg_ok "installed package $1"
}


arch_init()
{
        msg_info "setting up packages for Arch Linux"

        if ! pacman -V >/dev/null 2>&1; then
                mgs_fail "pacman not found"
        fi

        if ! checkupdates -h >/dev/null 2>&1; then
                msg_fail "checkupdates not found"
        fi

        if ! yay -V; then
                msg_fail "yay not found"
        fi

        arch_install gcc 0
        arch_install make 0
        arch_install postgresql 0
        arch_install postgresql-libs 0
        arch_install rsyslog 1

        if [ "$FLAGS_pandoc" -eq "$FLAGS_TRUE" ]; then
                arch_install pandoc 0
        else
                msg_warn "--nopandoc set, skipping pandoc installation"
        fi

        if [ "$FLAGS_check" -eq "$FLAGS_TRUE" ]; then
                arch_install valgrind 0
                arch_install criterion 1
        else
                msg_warn "--nocheck set, skipping valgrind installation"
                msg_warn "--nocheck set, skipping criterion installation"
        fi

        systemd_enabled postgresql.service
        if [ "$rv" -ne 0 ]; then
                if ! sudo -u postgres \
                    initdb --locale en_US.UTF-8 -D '/var/lib/postgres/data';
                then
                        msg_fail "failed to initialise postgres cluster"
                fi

                systemd_enable postgresql.service
        fi

        msg_ok "package setup complete"
}


# MAIN ENTRY POINT


main_flags "$@"
main_exec "$@"
