#!/bin/sh

. "$(dirname "0")/../external/shflags/shflags"
. "$(dirname "0")/../tools/os.sh"
. "$(dirname "0")/../tools/pkg.sh"
. "$(dirname "0")/../tools/msg.sh"


# -b,--bin (default true)
# -c,--check (default true)
# -d,--database (default true)
# -f,--force (default false)
# -m,--man (default true)
# -r,--release (default false)
# -u,--update (default true)


export OS


# MAIN FUNCTIONS


main_setup()
{
        DEFINE_boolean 'man' true 'generate man pages' 'm'
        DEFINE_boolean 'upgrade' false 'upgrade package manager' 'u'
        DEFINE_boolean 'check' true 'support check tools' 'c'
        DEFINE_boolean 'database' true 'generate database' 'd'
        DEFINE_boolean 'release' false 'build for release' 'r'
        DEFINE_boolean 'force' false 'force regeneration' 'f'

        FLAGS "$@" || exit $?
        eval set -- "$FLAGS_ARGV"

        os_query
}


main_exec()
{
        if [ "$FLAGS_upgrade" -eq "$FLAGS_TRUE" ]; then
                pkg_upgrade
        else
                msg_warn "--noupgrade set, skipping package upgrades"
        fi

        case "$OS_DISTRO" in
        Alpine)
                pkg_alpine
                ;;

        Arch)
                pkg_arch
                ;;

        FreeBSD)
                pkg_freebsd
                ;;

        *)
                pkg_debian
                ;;
        esac
}


# PACKAGE INSTALLATION FUNCTIONS


pkg_alpine()
{
        pkg_install gcc
        pkg_install build-base
        pkg_install make
        pkg_install postgresql
        pkg_install libpq-dev
        pkg_install rsyslog

        _wmsg="--man set, but not supported in Alpine Linux"
        [ "$FLAGS_man" -eq "$FLAGS_TRUE" ] && msg_warn _wmsg

        if [ "$FLAGS_check" -eq "$FLAGS_TRUE" ]; then
                pkg_install valgrind
                pkg_install git
                pkg_install libgit2
                pkg_install libgit2-dev
                pkg_install libffi-dev
                pkg_install pkgconf
                pkg_install ninja
                pkg_install meson
                pkg_install cmake

                _repo=https://github.com/Snaipe/Criterion
                _emsg="failed to clone criterion repository"
                git clone --recursive "$_repo" || msg_fail _emsg

                _emsg="failed to build criterion"
                cd build || msg_fail _emsg
                meson build || msg_fail _emsg
                ninja -C build || msg_fail _emsg

                _emsg="failed to install criterion"
                sudo ninja -C build install || msg_fail _emsg
                sudo ldconfig || msg_fail _emsg
        else
                msg_warn "--nocheck set, skipping support for check tools"
        fi
}


pkg_arch()
{
        pkg_install base-devel
        pkg_install postgresql
        pkg_install postgresql-libs
        pkg_install rsyslog

        if [ "$FLAGS_man" -eq "$FLAGS_TRUE" ]; then
                pkg_install pandoc
        else
                msg_warn "--noman set, skipping support for man pages"
        fi

        if [ "$FLAGS_check" -eq "$FLAGS_TRUE" ]; then
                pkg_install valgrind
                pkg_install criterion
        else
                msg_warn "--nocheck set, skipping support for check tools"
        fi
}


pkg_debian()
{
        msg_fail "not implemented"
}


pkg_freebsd()
{
        pkg_install llvm13
        pkg_install postgresql14-server
        pkg_install postgresql14-contrib
        pkg_install postgresql-libpgeasy
        pkg_install rsyslog

        if [ "$FLAGS_man" -eq "$FLAGS_TRUE" ]; then
                pkg_install hs-pandoc
                pkg_install hs-pandoc-crossref
        else
                msg_warn "--noman set, skipping support for man pages"
        fi

        if [ "$FLAGS_check" -eq "$FLAGS_TRUE" ]; then
                pkg_install valgrind
                pkg_install criterion
        else
                msg_warn "--nocheck set, skipping support for check tools"
        fi
}


# MAIN ENTRY POINT


main_setup "$@"
main_exec
