#!/bin/sh

. "$(dirname "0")/../external/shflags/shflags"
. "$(dirname "0")/../tools/msg.sh"
. "$(dirname "0")/../tools/os.sh"
. "$(dirname "0")/../tools/pkg.sh"
. "$(dirname "0")/../tools/srv.sh"


# -b,--bin (default true)
# -c,--check (default true)
# -d,--database (default true)
# -f,--force (default false)
# -m,--man (default true)
# -r,--release (default false)
# -u,--update (default true)


export OS


# MAIN FUNCTIONS


main_setup()
{
        DEFINE_boolean 'man' true 'generate man pages' 'm'
        DEFINE_boolean 'upgrade' false 'upgrade package manager' 'u'
        DEFINE_boolean 'check' true 'support check tools' 'c'
        DEFINE_boolean 'database' true 'generate database' 'd'
        DEFINE_boolean 'release' false 'build for release' 'r'
        DEFINE_boolean 'force' false 'force regeneration' 'f'

        FLAGS "$@" || exit $?
        eval set -- "$FLAGS_ARGV"

        os_query
}


main_exec()
{
        pkg_base
        pkg_postgres
        pkg_rsyslog
        pkg_check
        pkg_man
}


# PACKAGE CONFIGURATIONS


pkg_base()
{
        if [ "$FLAGS_upgrade" -eq "$FLAGS_TRUE" ]; then
                pkg_upgrade
        else
                msg_warn "--noupgrade set, skipping package upgrades"
        fi
}


pkg_postgres()
{
        _opt=" --locale=en_US.UTF-8 --encoding=UTF8"

        case "$OS_DISTRO" in
        Alpine)
                pkg_install postgresql
                pkg_install libpq-dev
                ;;

        Arch)
                pkg_install postgresql
                pkg_install postgresql-libs

                _datadir=/var/lib/postgres/data
                _emsg='failed to initialise postgres cluster'
                _imsg='checking postgres cluster'
                _omsg='postgres cluster initialised'

                msg_info "$_imsg"
                if [ -d "$_datadir" ]; then
                        msg_ok "$_omsg"
                        srv_enable postgresql.service
                        return
                fi

                sudo -u postgres initdb         \
                    --locale=en_US.UTF-8        \
                    --encoding=UTF8             \
                    -D "$_datadir"              \
                    || msg_fail "$_emsg"

                srv_enable postgresql.service
                msg_ok "$_omsg"
                ;;

        FreeBSD)
                pkg_install postgresql14-server
                pkg_install postgresql14-client
                pkg_install postgresql14-contrib
                pkg_install postgresql-libpgeasy

                _datadir=/var/db/postgres/data14
                _emsg='failed to initialise postgres cluster'
                _imsg='checking postgres cluster'
                _omsg='postgres cluster initialised'

                sudo /usr/local/etc/rc.d/postgresql initdb      \
                    --locale=en_US.UTF-8                        \
                    --encoding=UTF8                             \
                    -D "$_datadir"                              \
                    || msg_fail "$_emsg"

                sudo /usr/local/etc/rc.d/postgresql start || msg_fail "$_emsg"
                srv_enable postgresql
                msg_ok "$_omsg"
                ;;

        *)
                pkg_install postgresql
                pkg_install postgresql-contrib
                pkg_install libpq-dev
                srv_enable postgresql
                ;;
        esac
}


pkg_rsyslog()
{
        pkg_install rsyslog
}


pkg_check()
{
        if [ "$FLAGS_check" -eq "$FLAGS_FALSE" ]; then
                msg_warn "--nocheck set, skipping support for check tools"
                return
        fi

        pkg_install valgrind

        case "$OS_DISTRO" in
        Alpine)
                pkg_install libgit2
                pkg_install libgit2-dev
                pkg_install libffi-dev
                pkg_install pkgconf
                pkg_install ninja
                pkg_install meson
                pkg_install cmake

                _repo=https://github.com/Snaipe/Criterion
                _emsg="failed to clone criterion repository"
                git clone --recursive "$_repo" || msg_fail _emsg

                _emsg="failed to build criterion"
                cd build || msg_fail _emsg
                meson build || msg_fail _emsg
                ninja -C build || msg_fail _emsg

                _emsg="failed to install criterion"
                sudo ninja -C build install || msg_fail _emsg
                sudo ldconfig || msg_fail _emsg
                ;;

        Arch)
                pkg_install criterion
                ;;

        FreeBSD)
                pkg_install criterion
                ;;

        *)
                pkg_install libcriterion-dev
                ;;
        esac
}


pkg_man()
{
        if [ "$FLAGS_man" -eq "$FLAGS_FALSE" ]; then
                msg_warn "--noman set, skipping support for man pages"
                return
        fi

        case "$OS_DISTRO" in
        Alpine)
                msg_warn "--man set, but not supported in Alpine Linux"
                ;;

        Arch)
                pkg_install pandoc
                ;;

        FreeBSD)
                pkg_install hs-pandoc
                pkg_install hs-pandoc-crossref
                pkg_install hs-pandoc-citeproc
                ;;

        *)
                pkg_install pandoc
                pkg_install pandoc-citeproc
                pkg_install pandoc-crossref
                ;;
        esac
}


# MAIN ENTRY POINT


main_setup "$@"
main_exec
