#!/bin/sh

. "$(dirname "0")/../external/shflags/shflags"
. "$(dirname "0")/../tools/msg.sh"


# -b,--bin (default true)
# -c,--check (default true)
# -d,--database (default true)
# -f,--force (default false)
# -m,--man (default true)
# -r,--release (default false)
# -u,--update (default true)


export OS


# MAIN FUNCTIONS


main_flags()
{
        DEFINE_boolean 'man' true 'generate man pages' 'm'
        DEFINE_boolean 'update' true 'update package manager' 'u'
        DEFINE_boolean 'check' true 'support check tools' 'c'
        DEFINE_boolean 'database' true 'generate database' 'd'
        DEFINE_boolean 'release' false 'build for release' 'r'
        DEFINE_boolean 'force' false 'force regeneration' 'f'

        FLAGS "$@" || exit $?
        eval set -- "$FLAGS_ARGV"
}


main_exec()
{
        msg_info "detecting OS"

        os_freebsd
        os_linux

        _cmd="./pkgsetup -t $OS"
        [ "$FLAGS_update" -eq "$FLAGS_FALSE" ] && _cmd="_cmd --noupdate"
        [ "$FLAGS_check" -eq "$FLAGS_FALSE" ] && _cmd="_cmd --nocheck"
        [ "$FLAGS_man" -eq "$FLAGS_FALSE" ] && _cmd="_cmd --nopandoc"
        eval "$_cmd"

        if [ "$FLAGS_database" -eq "$FLAGS_TRUE" ]; then
                if [ "$FLAGS_force" -eq "$FLAGS_TRUE" ]; then
                        ./dbsetup --purge
                else
                        ./dbsetup
                fi
        fi

        _cmd=./mksetup
        [ "$FLAGS_check" -eq "$FLAGS_FALSE" ] && _cmd="_cmd --nocheck"
        [ "$FLAGS_man" -eq "$FLAGS_FALSE" ] && _cmd="_cmd --noman"
        [ "$FLAGS_release" -eq "$FLAGS_TRUE" ] && _cmd="_cmd --nodebug"
        [ "$FLAGS_force" -eq "$FLAGS_TRUE" ] && _cmd="_cmd --force"
        eval "$_cmd"
}


# OS FUNCTIONS


os_freebsd()
{

        [ "$(uname -s)" != FreeBSD ]  && return

        _ver=$(uname -r | cut -d '-' -f 1 | tr -d '.')
        [ "$_ver" -lt 122 ] &&  msg_fail "FreeBSD < v12.2 unsupported"

        OS=freebsd
        msg_ok "FreeBSD $_ver detected"
}


os_linux()
{
        [ -z "$OS" ] || return
        [ "$(uname -s)" != Linux ] && msg_fail "unsupported kernel detected"
        [ -f /etc/os-release ] || msg_fail "outdated Linux kernel detected"

        _distro=$(grep 'NAME' /etc/os-release   \
            | head -n1                          \
            | cut -d '=' -f 2                   \
            | tr -d '"'                         \
            | cut -d ' ' -f 1)

        if [ "$_distro" = Arch ]; then
                OS=arch
                msg_ok "detected Arch Linux"

                return
        fi

        if [ "$_distro" = Alpine ]; then
                OS=Alpine
                msg_ok "detected Alpine Linux"

                return
        fi

        if [ "$_distro" = Debian ]; then
                _ver=$(grep 'VERSION=' /etc/os-release  \
                    | tr -d '"'                         \
                    | cut -d '=' -f 2)

                _vern=$(echo "$_ver" | tr -d 'A-Z a-z (  ) .')
                [ "$_vern" -lt 10 ] && msg_fail "Debian < v10 unsupported"

                OS=debian
                msg_ok "detected Debian $_ver"

                return
        fi

        if [ "$_distro" = Ubuntu ]; then
                _ver=$(grep 'VERSION_ID' /etc/os-release    \
                    | tr -d '"'                             \
                    | cut -d '=' -f 2)

                _vern=$(echo "$_ver" | tr -d 'A-Z a-z (  ) .')
                [ "$_vern" -lt 2004 ] && msg_fail "Ubuntu < v20.04 unsupported"

                OS=ubuntu
                msg_ok "detected Ubuntu $_ver"

                return
        fi

        msg_fail "unable to determine OS"
}


# MAIN ENTRY POINT


main_flags "$@"
main_exec
