#!/bin/sh

. "$(dirname "0")/../external/shflags/shflags"
. "$(dirname "0")/../tools/msg.sh"
. "$(dirname "0")/../tools/os.sh"
. "$(dirname "0")/../tools/pkg.sh"
. "$(dirname "0")/../tools/srv.sh"


# -b,--bin (default true)
# -c,--check (default true)
# -d,--database (default true)
# -f,--force (default false)
# -m,--man (default true)
# -r,--release (default false)
# -u,--update (default true)


# MAIN FUNCTIONS


main_setup()
{
        DEFINE_boolean 'bin' true 'make elmy binary target' 1001
        DEFINE_boolean 'man' false 'make manpages target' 1002
        DEFINE_boolean 'upgrade' false 'upgrade package manager' 1003
        DEFINE_boolean 'check' false 'make check target' 1004
        DEFINE_boolean 'release' false 'build for release' 1005
        DEFINE_boolean 'reset' false 'reset setup' 1006
        DEFINE_string 'dbhost' '127.0.0.1' 'database host address' 1007
        DEFINE_integer 'dbport' '5432' 'database port' 1008
        DEFINE_string 'dbname' 'syslog' 'database name' 1009
        DEFINE_string 'dbuser' 'rsyslog' 'database user' 1010
        DEFINE_string 'dbpass' 'rsyslog' 'database user password' 1011
        DEFINE_string 'dbpgpass' '' 'database postgres password' 1012

        FLAGS "$@" || exit $?
        eval set -- "$FLAGS_ARGV"
}


main_exec()
{
        if [ "$FLAGS_upgrade" -eq "$FLAGS_FALSE" ]; then
                msg_warn '--upgrade unset, skipping upgrade'
        else
                pkg_upgrade
        fi

        _emsg='configuration failed'

        unset "$@"
        [ "$FLAGS_check" -eq "$FLAGS_TRUE" ] && set -- "$@" --check; shift
        [ "$FLAGS_man" -eq "$FLAGS_TRUE" ] && set -- "$@" --man
        echo "Passing args $*"
        ./toolsetup.sh "$@" || msg_fail "$_emsg"

        set -- --dbhost="$FLAGS_dbhost"; shift
        set -- --dbport="$FLAGS_dbport"; shift
        set -- --dbname="$FLAGS_dbname"; shift
        set -- --dbuser="$FLAGS_dbuser"; shift
        set -- --dbpass="$FLAGS_dbpass"; shift
        set -- --dbpgpass="$FLAGS_dbpass"; shift
        [ "$FLAGS_reset" -eq "$FLAGS_TRUE" ] && set -- --reset
        ./dbsetup.sh "$@" || msg_fail "$_emsg"
        unset --

        #./mksetup "$@" || msg_fail "$_emsg"
        #./dbsetup "$@" || msg_fail "$_emsg"
}


# ARCH LINUX CONFIGURATAION

arch_cfg()
{
        pkg_install git
        pkg_install base-devel

        arch_postgres
        arch_rsyslog
        arch_check
        arch_man
}


arch_postgres()
{
        _datadir=/var/lib/postgres/data

        pkg_install postgresql
        pkg_install postgresql-libs

        msg_info 'checking postgres cluster'

        if [ -d "$_datadir" ]; then
                msg_ok "$_omsg"
                srv_enable postgresql.service
                return
        fi

        sudo -u postgres initdb         \
            --locale=en_US.UTF-8        \
            --encoding=UTF8             \
            -D "$_datadir"              \
            || msg_fail 'failed to initialise postgres cluster'

        srv_enable postgresql.service
        msg_ok 'postgres cluster initialised'
}


arch_rsyslog()
{
        pkg_install rsyslog
}


arch_check()
{
        if [ "$FLAGS_check" -eq "$FLAGS_FALSE" ]; then
                msg_warn "--nocheck set, skipping support for check tools"
                return
        fi

        pkg_install valgrind
        pkg_install criterion
}


arch_man()
{
        if [ "$FLAGS_man" -eq "$FLAGS_FALSE" ]; then
                msg_warn "--noman set, skipping support for man pages"
                return
        fi

        pkg_install pandoc
}


# PACKAGE CONFIGURATIONS


pkg_postgres()
{
        _opt=" --locale=en_US.UTF-8 --encoding=UTF8"

        case "$OS_DISTRO" in
        Alpine)
                pkg_install postgresql
                pkg_install libpq-dev
                ;;

        FreeBSD)
                pkg_install postgresql14-server
                pkg_install postgresql14-client
                pkg_install postgresql14-contrib
                pkg_install postgresql-libpgeasy

                _datadir=/var/db/postgres/data14
                _emsg='failed to initialise postgres cluster'
                _imsg='checking postgres cluster'
                _omsg='postgres cluster initialised'

                sudo /usr/local/etc/rc.d/postgresql initdb      \
                    --locale=en_US.UTF-8                        \
                    --encoding=UTF8                             \
                    -D "$_datadir"                              \
                    || msg_fail "$_emsg"

                sudo /usr/local/etc/rc.d/postgresql start || msg_fail "$_emsg"
                srv_enable postgresql
                msg_ok "$_omsg"
                ;;

        *)
                pkg_install postgresql
                pkg_install postgresql-contrib
                pkg_install libpq-dev
                srv_enable postgresql
                ;;
        esac
}


pkg_rsyslog()
{
        pkg_install rsyslog
}


pkg_check()
{
        if [ "$FLAGS_check" -eq "$FLAGS_FALSE" ]; then
                msg_warn "--nocheck set, skipping support for check tools"
                return
        fi

        pkg_install valgrind

        case "$OS_DISTRO" in
        Alpine)
                pkg_install libgit2
                pkg_install libgit2-dev
                pkg_install libffi-dev
                pkg_install pkgconf
                pkg_install ninja
                pkg_install meson
                pkg_install cmake

                _repo=https://github.com/Snaipe/Criterion
                _emsg="failed to clone criterion repository"
                git clone --recursive "$_repo" || msg_fail _emsg

                _emsg="failed to build criterion"
                cd build || msg_fail _emsg
                meson build || msg_fail _emsg
                ninja -C build || msg_fail _emsg

                _emsg="failed to install criterion"
                sudo ninja -C build install || msg_fail _emsg
                sudo ldconfig || msg_fail _emsg
                ;;

        FreeBSD)
                pkg_install criterion
                ;;

        *)
                pkg_install libcriterion-dev
                ;;
        esac
}


pkg_man()
{
        if [ "$FLAGS_man" -eq "$FLAGS_FALSE" ]; then
                msg_warn "--noman set, skipping support for man pages"
                return
        fi

        case "$OS_DISTRO" in
        Alpine)
                msg_warn "--man set, but not supported in Alpine Linux"
                ;;

        FreeBSD)
                pkg_install hs-pandoc
                pkg_install hs-pandoc-crossref
                pkg_install hs-pandoc-citeproc
                ;;

        *)
                pkg_install pandoc
                pkg_install pandoc-citeproc
                pkg_install pandoc-crossref
                ;;
        esac
}


# MAIN ENTRY POINT


main_setup "$@"
main_exec "$@"
