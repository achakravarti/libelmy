#!/bin/sh

. "$(dirname "0")/../external/shflags/shflags"
. "$(dirname "0")/../tools/msg.sh"


# -b,--box (default arch)
# -k,--sshkey (default $HOME/.ssh/id_rsa)
# -p,--purge (default false)
#
# ./vgsetup -b arch -k ~/.ssh/id_rsa -p -u


#                                                               %func:flag_setup
# __NAME__
#       flag_setup() - sets up command line flags
#
main_flags()
{
        DEFINE_string 'box' 'arch' 'Vagrant box' 'b'
        DEFINE_string 'sshkey' "$HOME/.ssh/id_rsa" 'GitHub SSH key' 'k'
        DEFINE_boolean 'purge' false 'purge existing Vagrant box' 'p'

        FLAGS "$@" || exit $?
        eval set -- "$FLAGS_ARGV"
}


main_run()
{
        if ! vagrant -v >/dev/null 2>&1; then
                msg_fail  "vagrant command not found"
        else
                msg_ok "vagrant command found"
        fi

        if [ -e Vagrantfile ]; then
                if [ "$FLAGS_purge" = "$FLAGS_TRUE" ]; then
                        msg_warn "--purge set, removing existing Vagrant box"

                        vagrant halt >/dev/null 2>&1
                        vagrant destroy -f >/dev/null 2>&1
                        rm Vagrantfile

                        msg_ok "purged existing Vagrant box"

                elif vagrant status | grep "is running" >/dev/null 2>&1; then
                        msg_ok "Vagrant box already running, skipping"
                        exit 0

                else
                        msg_ok "existing Vagrantfile found"
                        vgbox_boot
                fi
        fi

        if [ "$FLAGS_box" = arch ]; then
                vgfile_arch
        elif [ "$FLAGS_box" = alpine ]; then
                vgfile_alpine
        elif [ "$FLAGS_box" = debian ]; then
                vgfile_debian
        elif [ "$FLAGS_box" = centos ]; then
                vgfile_centos
        elif [ "$FLAGS_box" = freebsd ]; then
                vgfile_freebsd
        fi

        vgbox_boot
}


#                                                               %func:vgbox_boot
# __NAME__
#       vgbox_boot() - boots Vagrant box
#
vgbox_boot()
{
        msg_info "booting Vagrant box"

        if ! vagrant up; then
                msg_fail "failed to boot box"
        fi

        msg_info "forwarding SSH key $FLAGS_sshkey"

        if ! eval "$(ssh-agent -s)"; then
                msg_fail "failed to forward SSH key $FLAGS_sshkey"
        fi

        if ! ssh-add "$FLAGS_sshkey"; then
                msg_fail "failed to forward SSH key $FLAGS_sshkey"
        fi

        msg_ok "forwarded SSH key $FLAGS_sshkey"
        msg_info "authenticating with GitHub"

        vagrant ssh -c 'ssh -o StrictHostKeyChecking=no -T git@github.com'
        if [ $? -gt 1 ]; then
                msg_fail "failed to authenticate with GitHub"
        fi

        msg_ok "authenticated with GitHub"
        git_clone libchrysalid
        git_clone libelmy

        msg_ok "vagrant box boot successful, happy coding :)"
        exit 0
}


git_clone()
{
        msg_info "Looking for $1 repository"

        if [ -d "$1" ]; then
                msg_ok "$1 repository found, skipping"
        else
                _repo="git@github.com:achakravarti/$1.git"

                if ! vagrant ssh -c \
                    "git clone --recurse-submodules $_repo"; then
                        msg_fail "failed to clone $1"
                fi

                msg_ok "cloned $1, run ./configure in it"
        fi
}


#                                                              %func:vgfile_arch
# __NAME__
#       vgfile_arch() - writes Vagrantfile for Arch Linux
#
vgfile_arch()
{
        msg_info "writing Vagrantfile for arch box"

        echo "Vagrant.configure(\"2\") do |config|" > Vagrantfile
        {
                echo "  config.vm.box = \"generic/arch\"";
                echo "  config.ssh.forward_agent = true";
                echo "  config.vm.provision \"shell\", inline: <<-SHELL";
                echo "    pacman -Syyu --noconfirm";
                echo "    pacman -S base-devel git go --noconfirm --needed";
                echo "    pacman -S pacman-contrib --noconfirm";
                echo "    git clone https://aur.archlinux.org/yay.git";
                echo "    chown -R vagrant:vagrant yay";
                echo "    su - vagrant -c \"cd yay; makepkg -si --noconfirm\"";
                echo "  SHELL";
                echo "end";
        } >> Vagrantfile

        msg_ok "Vagrantfile written for arch box"
}


#                                                            %func:vgfile_alpine
# __NAME__
#       vgfile_alpine() - writes Vagrantfile for Alpine Linux
#
vgfile_alpine()
{
        msg_fail "not implemented"
}


#                                                            %func:vgfile_debian
# __NAME__
#       vgfile_debian() - writes Vagrantfile for Debian Jessie
#
vgfile_debian()
{
        msg_fail "not implemented"
}


#                                                            %func:vgfile_centos
# __NAME__
#       vgfile_centos() - writes Vagrantfile for CentOS
#
vgfile_centos()
{
        msg_fail "not implemented"
}


#                                                           %func:vgfile_freebsd
# __NAME__
#       vgfile_freebsd() - writes Vagrantfile for FreeBSD
#
vgfile_freebsd()
{
        msg_fail "not implemented"
}


main_flags "$@"
main_run
